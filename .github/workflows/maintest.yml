name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  flutter_test:
    name: Run Flutter Test
    runs-on: ubuntu-latest
    # This line make sure the workflow will go on, even if the test run fail.
    continue-on-error: true
    steps:
      - name: Cache Flutter
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ./build
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # This one will create a file and import the content of that file (as a single string) through Github Secret var
      - name: Create env.dart
        run: echo "${{ secrets.ENV_SECRET }}" > lib/env.dart
      - run: flutter pub get
      - run: flutter --version
      - run: flutter analyze
  # If we have tests, we can run them here. Uncomment the following lines to run tests
  #      - run: flutter test

  build_iOSApp:
    name: Build Flutter App (iOS)
    needs: [flutter_test]
    runs-on: macos-latest
    steps:
      - name: Cache Flutter
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ./build
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'
          dart-version: '3.3.4'
          channel: 'stable'
      - name: Create env.dart
        # Change the key based on the secret var you created for the env file
        run: echo "${{ secrets.ENV_SECRET }}" > lib/env.dart
      - run: flutter pub get
      - run: flutter clean
      - run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

  build_androidApk:
    name: Build Flutter App (Android)
    needs: [flutter_test]
    runs-on: ubuntu-latest
    steps:
      - name: Cache Flutter
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ./build
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      # Change the secret on your setup of the env file to the mentioned Secret var
      - name: Create env.dart
        run: echo "${{ secrets.ENV_SECRET }}" > lib/env.dart
      - run: flutter pub get
      - run: flutter clean
      - name: Update Gradle Wrapper
        run: |
          sed -i 's|distributionUrl=.*|distributionUrl=https\://services.gradle.org/distributions/gradle-7.3.3-bin.zip|' android/gradle/wrapper/gradle-wrapper.properties
      - run: flutter build apk --debug

      # This section setting up a release code, you have to give the PAT key the following rights:
      #      repo
      #      repo:status
      #      repo_deployment
      #      public_repo
      #      repo:invite
      #      workflow
      #      write:packages
      #      read:packages
      #      delete:packages
      #      notifications
      
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/debug/*"
          tag: v1.0.${{ github.run_number}}
          token: ${{ secrets.PAT_KEY_30_DAYS}}
  
  # This one is quite depended on your need, dev it if you like.
  notify_failure:
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Failure
        run: echo "Build failed" # Replace with actual notification command